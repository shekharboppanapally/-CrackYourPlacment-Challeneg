Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] 
such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

#Code 

def solve(nums):
    nums=sorted(nums)
    N=len(nums)
    if N<=1:
        return []
    res=[]
    for i in range(0,N-2):
        start=i+1 
        end=N-1 
        while start<end:
            if nums[i]+nums[start]+nums[end]==0:
                K=[nums[i],nums[start],nums[end]]
                if K not in res:
                    res.append(K)
                end-=1 
                start+=1 
            elif nums[i]+nums[start]+nums[end]<0:
                start+=1 
            else:
                end-=1 
    return res

nums=[-1,0,1,2,-1,-4]
print(solve(nums))

output=[[-1, -1, 2], [-1, 0, 1]]
