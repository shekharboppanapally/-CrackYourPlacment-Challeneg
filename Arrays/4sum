Given an array nums of n integers, 
return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

#Code 

def solve(lst,target):
    res=[]
    N=len(lst)
    lst=sorted(lst)
    for i in range(N-3):
        for j in range(i+1,N-2):
            start=j+1 
            end=N-1 
            while start<end:
                if lst[i]+lst[j]+lst[start]+lst[end]==target:
                    K=[lst[i],lst[j],lst[start],lst[end]]
                    if K not in res:
                        res.append(K)
                    start+=1 
                    end-=1 
                elif lst[i]+lst[j]+lst[start]+lst[end]<target:
                    start+=1 
                else:
                    end-=1 
    return res 

nums=[2,2,2,2,2]
target=8
print(solve(nums,target))

output=[[2, 2, 2, 2]]
